name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/react-cicd-app

jobs:
  # Job 1: Test and Build
  test-and-build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

      # Docker build and push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 2: Deploy to Development
  deploy-dev:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update image tag in dev overlay
        run: |
          cd k8s/overlays/dev
          kustomize edit set image abhishekbhatt0/react-cicd-app=${{ needs.test-and-build.outputs.image-tag }}

      - name: Deploy to development
        run: |
          kustomize build k8s/overlays/dev | kubectl apply -f -
          kubectl rollout status deployment/dev-cicd-app -n cicd-dev --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -n cicd-dev
          kubectl get services -n cicd-dev

  # Job 3: Deploy to Production (manual approval)
  deploy-prod:
    needs: [test-and-build, deploy-dev]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Setup Kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Update image tag in prod overlay
        run: |
          cd k8s/overlays/prod
          kustomize edit set image abhishekbhatt0/react-cicd-app=${{ needs.test-and-build.outputs.image-tag }}

      - name: Deploy to production
        run: |
          kustomize build k8s/overlays/prod | kubectl apply -f -
          kubectl rollout status deployment/prod-cicd-app -n cicd-prod --timeout=300s

      - name: Verify production deployment
        run: |
          kubectl get pods -n cicd-prod
          kubectl get services -n cicd-prod

      - name: Run smoke tests
        run: |
          # Wait for service to be ready
          sleep 30
          # Port forward and test (basic health check)
          kubectl port-forward -n cicd-prod service/prod-cicd-service 8081:80 &
          sleep 10
          curl -f http://localhost:8081/health || exit 1
          echo "Production deployment successful!"

  # Job 4: Security Scan
  security-scan:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.test-and-build.outputs.image-tag }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
